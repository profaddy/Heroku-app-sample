{"ast":null,"code":"import Actions from \"./inventory-manager-action-constants\";\nimport { all, put, takeEvery, call } from \"redux-saga/effects\";\nimport { fetchInventories, addInventory } from \"./inventory-manager-api.js\";\nimport { createNotification } from \"../../utils/notificationHelper\";\nexport function* fetchInventoriesSaga(action) {\n  try {\n    const {\n      data\n    } = yield call(fetchInventories);\n    const inventories = data.products;\n    const inventoriesList = inventories.reduce((acc, item) => {\n      const inventory = {\n        name: item.name,\n        value: item._id\n      };\n      acc.push(inventory);\n      return acc;\n    }, []);\n    yield put({\n      type: Actions.FETCH_INVENTORIES_SUCCESS,\n      data: inventoriesList\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: Actions.FETCH_INVENTORIES_FAILURE\n    });\n  }\n}\nexport function* addInventorySaga(action) {\n  try {\n    yield call(addInventory, action.inventory);\n    yield put(createNotification(\"Product added successfully\", \"success\"));\n    yield put({\n      type: Actions.ADD_INVENTORY_SUCCESS\n    });\n    setTimeout(() => {\n      window.location.reload();\n    }, 1000);\n    yield put({\n      type: Actions.CLOSE_ADD_INVENTORY_MODAL\n    });\n  } catch (error) {\n    yield put(createNotification(`error while adding product: ${error && error.response.data.message}`, \"error\"));\n    yield put({\n      type: Actions.ADD_INVENTORY_FAILURE\n    });\n  }\n}\nexport default function* inventoryrManagerSagas() {\n  yield all([takeEvery(Actions.ADD_INVENTORY_REQUEST, addInventorySaga), takeEvery(Actions.FETCH_INVENTORIES_REQUEST, fetchInventoriesSaga)]);\n}","map":{"version":3,"sources":["/home/adnan/Desktop/Projects/pocs/credit-debit-software/client/src/containers/InventoryManager/inventory-manager-sagas.js"],"names":["Actions","all","put","takeEvery","call","fetchInventories","addInventory","createNotification","fetchInventoriesSaga","action","data","inventories","products","inventoriesList","reduce","acc","item","inventory","name","value","_id","push","type","FETCH_INVENTORIES_SUCCESS","error","console","FETCH_INVENTORIES_FAILURE","addInventorySaga","ADD_INVENTORY_SUCCESS","setTimeout","window","location","reload","CLOSE_ADD_INVENTORY_MODAL","response","message","ADD_INVENTORY_FAILURE","inventoryrManagerSagas","ADD_INVENTORY_REQUEST","FETCH_INVENTORIES_REQUEST"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sCAApB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,4BAA/C;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AAGA,OAAO,UAAUC,oBAAV,CAA+BC,MAA/B,EAAuC;AAC1C,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACC,gBAAD,CAA3B;AACA,UAAMM,WAAW,GAAID,IAAI,CAACE,QAA1B;AACA,UAAMC,eAAe,GAAGF,WAAW,CAACG,MAAZ,CAAmB,CAACC,GAAD,EAAMC,IAAN,KAAe;AACtD,YAAMC,SAAS,GAAG;AAAEC,QAAAA,IAAI,EAAEF,IAAI,CAACE,IAAb;AAAmBC,QAAAA,KAAK,EAAEH,IAAI,CAACI;AAA/B,OAAlB;AACAL,MAAAA,GAAG,CAACM,IAAJ,CAASJ,SAAT;AACA,aAAOF,GAAP;AACH,KAJuB,EAIrB,EAJqB,CAAxB;AAKA,UAAMb,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAACuB,yBAAhB;AAA2Cb,MAAAA,IAAI,EAAEG;AAAjD,KAAD,CAAT;AACH,GATD,CASE,OAAOW,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMtB,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAAC0B;AAAhB,KAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,CAA2BlB,MAA3B,EAAmC;AACtC,MAAI;AACA,UAAML,IAAI,CAACE,YAAD,EAAeG,MAAM,CAACQ,SAAtB,CAAV;AACA,UAAMf,GAAG,CAACK,kBAAkB,CAAC,4BAAD,EAA+B,SAA/B,CAAnB,CAAT;AACA,UAAML,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAAC4B;AAAhB,KAAD,CAAT;AACAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,KAFS,EAEP,IAFO,CAAV;AAGA,UAAM9B,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAACiC;AAAhB,KAAD,CAAT;AACH,GARD,CAQE,OAAOT,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACK,kBAAkB,CAAE,+BAA8BiB,KAAK,IAAIA,KAAK,CAACU,QAAN,CAAexB,IAAf,CAAoByB,OAAQ,EAArE,EAAwE,OAAxE,CAAnB,CAAT;AACA,UAAMjC,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAACoC;AAAhB,KAAD,CAAT;AACH;AACJ;AAED,eAAe,UAAUC,sBAAV,GAAmC;AAC9C,QAAMpC,GAAG,CAAC,CACNE,SAAS,CAACH,OAAO,CAACsC,qBAAT,EAAgCX,gBAAhC,CADH,EAENxB,SAAS,CAACH,OAAO,CAACuC,yBAAT,EAAoC/B,oBAApC,CAFH,CAAD,CAAT;AAIH","sourcesContent":["import Actions from \"./inventory-manager-action-constants\";\nimport { all, put, takeEvery, call } from \"redux-saga/effects\";\nimport { fetchInventories, addInventory } from \"./inventory-manager-api.js\";\nimport { createNotification } from \"../../utils/notificationHelper\";\n\n\nexport function* fetchInventoriesSaga(action) {\n    try {\n        const { data } = yield call(fetchInventories);\n        const inventories  = data.products;\n        const inventoriesList = inventories.reduce((acc, item) => {\n            const inventory = { name: item.name, value: item._id };\n            acc.push(inventory);\n            return acc;\n        }, []);\n        yield put({ type: Actions.FETCH_INVENTORIES_SUCCESS, data: inventoriesList });\n    } catch (error) {\n        console.error(error);\n        yield put({ type: Actions.FETCH_INVENTORIES_FAILURE });\n    }\n}\n\nexport function* addInventorySaga(action) {\n    try {\n        yield call(addInventory, action.inventory);\n        yield put(createNotification(\"Product added successfully\", \"success\"));\n        yield put({ type: Actions.ADD_INVENTORY_SUCCESS });\n        setTimeout(() => {\n            window.location.reload();\n        }, 1000);\n        yield put({ type: Actions.CLOSE_ADD_INVENTORY_MODAL });\n    } catch (error) {\n        yield put(createNotification(`error while adding product: ${error && error.response.data.message}`, \"error\"));\n        yield put({ type: Actions.ADD_INVENTORY_FAILURE });\n    }\n}\n\nexport default function* inventoryrManagerSagas() {\n    yield all([\n        takeEvery(Actions.ADD_INVENTORY_REQUEST, addInventorySaga),\n        takeEvery(Actions.FETCH_INVENTORIES_REQUEST, fetchInventoriesSaga)\n    ]);\n}\n\n"]},"metadata":{},"sourceType":"module"}