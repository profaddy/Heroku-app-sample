{"ast":null,"code":"import Actions from \"./user-manager-action-constants\";\nimport { all, put, select, takeEvery, call } from \"redux-saga/effects\";\nimport { fetchUsers, addUser } from \"./user-manager-api.js\";\nimport { createNotification } from \"../../utils/notificationHelper\";\n\nfunction* fetchUsersSaga(action) {\n  try {\n    const {\n      data\n    } = yield call(fetchUsers);\n    const {\n      users\n    } = data;\n    const formattedUsers = users.reduce((acc, item) => {\n      const entry = {\n        name: item.name,\n        value: item._id\n      };\n      acc.push(entry);\n      return acc;\n    }, []);\n    yield put({\n      type: Actions.FETCH_USER_SUCCESS,\n      data: formattedUsers\n    });\n  } catch (error) {\n    yield put({\n      type: Actions.FETCH_ENTRY_FAILURE\n    });\n  }\n}\n\nexport function* addUserSaga(action) {\n  try {\n    yield call(addUser, action.user);\n    yield put(createNotification(\"User added successfully\", \"success\"));\n    setTimeout(() => {\n      window.location.reload();\n    }, 1000);\n  } catch (error) {\n    console.log(error);\n    yield put(createNotification(`error while adding entry: ${error && error.response.data.message}`, \"error\"));\n    yield put({\n      type: Actions.ADD_USER_FAILURE\n    });\n  }\n}\nexport default function* userManagerSagas() {\n  yield all([takeEvery(Actions.ADD_USER_REQUEST, addUserSaga), takeEvery(Actions.FETCH_USER_REQUEST, fetchUsersSaga)]);\n}","map":{"version":3,"sources":["/home/adnan/Desktop/Projects/pocs/credit-debit-software/client/src/containers/UserManager/user-manager-sagas.js"],"names":["Actions","all","put","select","takeEvery","call","fetchUsers","addUser","createNotification","fetchUsersSaga","action","data","users","formattedUsers","reduce","acc","item","entry","name","value","_id","push","type","FETCH_USER_SUCCESS","error","FETCH_ENTRY_FAILURE","addUserSaga","user","setTimeout","window","location","reload","console","log","response","message","ADD_USER_FAILURE","userManagerSagas","ADD_USER_REQUEST","FETCH_USER_REQUEST"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iCAApB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,uBAApC;AACA,SAAQC,kBAAR,QAAiC,gCAAjC;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AAC7B,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACC,UAAD,CAA3B;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAYD,IAAlB;AACA,UAAME,cAAc,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC/C,YAAMC,KAAK,GAAG;AAAEC,QAAAA,IAAI,EAAEF,IAAI,CAACE,IAAb;AAAmBC,QAAAA,KAAK,EAAEH,IAAI,CAACI;AAA/B,OAAd;AACAL,MAAAA,GAAG,CAACM,IAAJ,CAASJ,KAAT;AACA,aAAOF,GAAP;AACH,KAJsB,EAIpB,EAJoB,CAAvB;AAKA,UAAMb,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAACuB,kBAAhB;AAAoCZ,MAAAA,IAAI,EAAEE;AAA1C,KAAD,CAAT;AACH,GATD,CASE,OAAOW,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAACyB;AAAhB,KAAD,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,WAAV,CAAsBhB,MAAtB,EAA8B;AACjC,MAAI;AACA,UAAML,IAAI,CAACE,OAAD,EAAUG,MAAM,CAACiB,IAAjB,CAAV;AACA,UAAMzB,GAAG,CAACM,kBAAkB,CAAC,yBAAD,EAA4B,SAA5B,CAAnB,CAAT;AACAoB,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAND,CAME,OAAOP,KAAP,EAAc;AACZQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,UAAMtB,GAAG,CAACM,kBAAkB,CAAE,6BAA4BgB,KAAK,IAAIA,KAAK,CAACU,QAAN,CAAevB,IAAf,CAAoBwB,OAAQ,EAAnE,EAAsE,OAAtE,CAAnB,CAAT;AACA,UAAMjC,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAACoC;AAAhB,KAAD,CAAT;AAEH;AACJ;AAED,eAAe,UAAUC,gBAAV,GAA6B;AACxC,QAAMpC,GAAG,CAAC,CACNG,SAAS,CAACJ,OAAO,CAACsC,gBAAT,EAA2BZ,WAA3B,CADH,EAENtB,SAAS,CAACJ,OAAO,CAACuC,kBAAT,EAA6B9B,cAA7B,CAFH,CAAD,CAAT;AAIH","sourcesContent":["import Actions from \"./user-manager-action-constants\";\nimport { all, put, select, takeEvery, call } from \"redux-saga/effects\";\nimport { fetchUsers, addUser } from \"./user-manager-api.js\";\nimport {createNotification} from \"../../utils/notificationHelper\";\n\nfunction* fetchUsersSaga(action) {\n    try {\n        const { data } = yield call(fetchUsers);\n        const { users } = data;\n        const formattedUsers = users.reduce((acc, item) => {\n            const entry = { name: item.name, value: item._id };\n            acc.push(entry);\n            return acc;\n        }, []);\n        yield put({ type: Actions.FETCH_USER_SUCCESS, data: formattedUsers });\n    } catch (error) {\n        yield put({ type: Actions.FETCH_ENTRY_FAILURE });\n    }\n}\n\nexport function* addUserSaga(action) {\n    try {\n        yield call(addUser, action.user);\n        yield put(createNotification(\"User added successfully\", \"success\"));\n        setTimeout(() => {\n            window.location.reload();\n        }, 1000);\n    } catch (error) {\n        console.log(error);\n        yield put(createNotification(`error while adding entry: ${error && error.response.data.message}`, \"error\"));\n        yield put({ type: Actions.ADD_USER_FAILURE });\n\n    }\n}\n\nexport default function* userManagerSagas() {\n    yield all([\n        takeEvery(Actions.ADD_USER_REQUEST, addUserSaga),\n        takeEvery(Actions.FETCH_USER_REQUEST, fetchUsersSaga)\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}