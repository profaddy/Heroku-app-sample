{"ast":null,"code":"export const customValidator = {\n  isPositiveNumber: value => {\n    if (!value && value !== 0) {\n      return \"Required!\";\n    } else if (isNaN(value)) {\n      return \"Value must be a number\";\n    } else if (!Number.isInteger(Number(value))) {\n      return \"value must be non-negative integer\";\n    } else if (Number(value) < 0) {\n      return \"value cannot be negative\";\n    }\n  },\n  maxLength: value => {\n    if (!value) {\n      return \"Required!\";\n    } else if (value.length > 1023) {\n      return \"Length must be less than 1024 characters\";\n    }\n  },\n  required: value => {\n    if (!value) {\n      return \"Required!\";\n    }\n  },\n  match: (value, confirmValue, matchKey) => {\n    if (!confirmValue) {\n      return \"Required!\";\n    } else if (value !== confirmValue) {\n      return `${matchKey} does not match`;\n    }\n  }\n};","map":{"version":3,"sources":["/home/adnan/Desktop/Projects/pocs/credit-debit-software/client/src/utils/validators.js"],"names":["customValidator","isPositiveNumber","value","isNaN","Number","isInteger","maxLength","length","required","match","confirmValue","matchKey"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG;AAC3BC,EAAAA,gBAAgB,EAAEC,KAAK,IAAI;AACvB,QAAI,CAACA,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;AACvB,aAAO,WAAP;AACH,KAFD,MAEO,IAAIC,KAAK,CAACD,KAAD,CAAT,EAAkB;AACrB,aAAO,wBAAP;AACH,KAFM,MAEA,IAAI,CAAEE,MAAM,CAACC,SAAP,CAAiBD,MAAM,CAACF,KAAD,CAAvB,CAAN,EAAuC;AAC1C,aAAO,oCAAP;AACH,KAFM,MAED,IAAGE,MAAM,CAACF,KAAD,CAAN,GAAgB,CAAnB,EAAqB;AACvB,aAAO,0BAAP;AACH;AACJ,GAX0B;AAa3BI,EAAAA,SAAS,EAAEJ,KAAK,IAAI;AAChB,QAAG,CAACA,KAAJ,EAAU;AACN,aAAO,WAAP;AACH,KAFD,MAEM,IAAGA,KAAK,CAACK,MAAN,GAAc,IAAjB,EAAsB;AACxB,aAAO,0CAAP;AACH;AACJ,GAnB0B;AAqB3BC,EAAAA,QAAQ,EAAEN,KAAK,IAAI;AACf,QAAI,CAACA,KAAL,EAAY;AACR,aAAO,WAAP;AACH;AACJ,GAzB0B;AA2B3BO,EAAAA,KAAK,EAAE,CAACP,KAAD,EAAOQ,YAAP,EAAoBC,QAApB,KAAiC;AACpC,QAAG,CAACD,YAAJ,EAAiB;AACb,aAAO,WAAP;AACH,KAFD,MAEM,IAAGR,KAAK,KAAKQ,YAAb,EAA0B;AAC5B,aAAQ,GAAEC,QAAS,iBAAnB;AACH;AACJ;AAjC0B,CAAxB","sourcesContent":["export const customValidator = {\n    isPositiveNumber: value => {\n        if (!value && value !== 0) {\n            return \"Required!\";\n        } else if (isNaN(value)) {\n            return \"Value must be a number\";\n        } else if (!(Number.isInteger(Number(value)))){\n            return \"value must be non-negative integer\";\n        }else if(Number(value) < 0){\n            return \"value cannot be negative\";\n        }\n    },\n\n    maxLength: value => {\n        if(!value){\n            return \"Required!\";\n        }else if(value.length >1023){\n            return \"Length must be less than 1024 characters\";\n        }\n    },\n\n    required: value => {\n        if (!value) {\n            return \"Required!\";\n        }\n    },\n\n    match: (value,confirmValue,matchKey) => {\n        if(!confirmValue){\n            return \"Required!\";\n        }else if(value !== confirmValue){\n            return `${matchKey} does not match`;\n        }\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}